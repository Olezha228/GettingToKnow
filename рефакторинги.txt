Расщепление временной переменной (для нового присвоения временной переменной дб новая перменная)

Remove Assignments to Parameters (не присваивать значения параметрам метода)

Replace Method with Method Object (метод убираем в новый класс)

Сокрытие делегирования - Удаление посредника (надо или нет инфа о 3-м лице)

Введение внешнего метода (static - extension)
Введение локального расширения - оболочка или подкласс

Replace Data Value with Object - если от поля нужно больше чем просто значение

Замена значения ссылкой  (Change Value to Reference) - 
public static Customer getNamed (String name) {
 return (Customer) _instances.get(name);
 } --- фабрика для возвращения заранее заданного клиента

Replace Array with Object

Дублирование видимых данных   - Observer and Observable
(Duplicate Observed Data) 
Есть данные предметной области приложения, присутствующие толь
ко в графическом элементе GUI, к которым нужен доступ методам
предметной области приложения.
Скопируйте данные в объект предметной области приложения.
Создайте объект&наблюдатель, который будет обеспечивать син&
хронность данных.

Замена однонаправленной связи двунаправленной
Замена двунаправленной связи однонаправленной

Замена магического числа символической константой 

Инкапсуляция коллекции 
(Encapsulate Collection)
Метод возвращает коллекцию.
Сделайте возвращаемое методом значение доступным только для
чтения и создайте методы добавления/удаления элементов.

Замена кода типа классом (поле класса кода, типа хранятся внутри)
Замена кода типа подклассами (в наследниках главного класса хранятся автоматически коды)
Замена кода типа состоянием/стратегией  (поле имеет разные типы -  наследники единого типа)

Замена подкласса полями  (Например Person с Male and Female)
(Replace Subclass with Fields)
Есть подклассы, которые различаются только методами, возвращаю
щими данныеконстанты.
Замените методы полями в родительском классе и удалите под&
классы

Удаление управляющего флага (заменяем на break and continue)

Замена вложенных условных операторов 
граничным оператором
Пример:
double getPayAmount() {
 if (_isDead) return deadAmount();
 if (_isSeparated) return separatedAmount();
 if (_isRetired) return retiredAmount();
 return normalPayAmount();
}


Замена условного оператора 
полиморфизмом!!!!


Введение объекта Null (Introduce Null Object) - наследуем и проставляем значения для NullObject

Введение утверждения (Introduce Assertion) - контрактное программирование

Разделение запроса и модификатора 
(Separate Query from Modifier)


Замена параметра вызовом метода 
(Replace Parameter with Method)

Введение граничного объекта - особенно Range
(Introduce Parameter Object)
Есть группа параметров, естественным образом связанных друг с
другом.
Замените их объектом.


Инкапсуляция нисходящего преобразования 
типа (Encapsulate Downcast)
Метод возвращает объект, к которому вызывающий должен приме
нить нисходящее преобразование типа.
Переместите нисходящее преобразование внутрь метода.


Формирование шаблона метода 
(Form Template Method)
Есть два метода в подклассах, выполняющие аналогичные шаги в оди
наковом порядке, однако эти шаги различны.
Образуйте из этих шагов методы с одинаковой сигнатурой, чтобы
исходные методы стали одинаковыми. После этого можно их под&
нять в родительский класс


Замена наследования делегированием 
(Replace Inheritance with Delegation)
Подкласс использует только часть интерфейса родительского класса
или не желает наследовать данные.
Создайте поле для родительского класса, настройте методы, чтобы
они делегировали выполнение родительскому классу, и удалите под&
классы.

Замена делегирования наследованием 
(Replace Delegation with Inheritance)
Вы используете делегирование и часто пишете много простых делеги
рований для интерфейса в целом.
Сделайте делегирующий класс подклассом делегата.





